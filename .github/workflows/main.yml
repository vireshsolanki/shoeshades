name: website deployment
on:
  push:
    branches:
    - master
jobs:
  deploy:
    name: deploy to staging
    runs-on: self-hosted
    steps:    
    
    # - name: Setup Python
    #   uses: actions/setup-python@v2
    #   with:
    #      python-version: ${{matrix.python-version}}
    - name: Checkout code
      uses: actions/checkout@v1
    - name: Setup docker buildx
      uses: docker/setup-buildx-action@v3.0.0
    - name: docker login
      uses: docker/login-action@v3.0.0
      with:
        username: ${{secrets.DOCKER_USERNAME}}
        password: ${{secrets.DOCKER_PASSWORD}}
      #run: docker login -u ${{ secrets.DOCKER_USERNAME }} -p ${{ secrets.DOCKER_PASSWORD }}
    - name: build and push
      run: |
        docker build -t vireshsolanki/myproject:1.0 .
        docker push vireshsolanki/myproject:1.0
      env:
        DOCKER_USERNAME: ${{secrets.DOCKER_USERNAME}}
        DOCKER_PASSWORD: ${{secrets.DOCKER_PASSWORD}}
    
    - name: Install dependencies
      run: pip install -r requirements.txt
    # - name: Install kubectl
    #   run: |
    #       curl -LO "https://dl.k8s.io/release/$(curl -L -s https://dl.k8s.io/release/stable.txt)/bin/linux/amd64/kubectl"
    #       chmod +x kubectl
    #       sudo mv kubectl /usr/local/bin/
    # - name: aws cli
    #   uses: aws-actions/configure-aws-credentials@v2
    #   with:
    #     aws-access-key-id: ${{ secrets.ACCESS_KEY}}
    #     aws-secret-access-key: ${{secrets.SECRET_KEY}}
    #     aws-region: ap-south-1
    - name: AWS CLI Configuration
      run: |
        aws configure set aws_access_key_id ${{ secrets.ACCESS_KEY }}
        aws configure set aws_secret_access_key ${{ secrets.SECRET_KEY }}
        aws configure set region ap-south-1
    - name: Verify Kubeconfig
      run: kubectl config get-contexts
    - name: authenticate eks
      run: aws eks --region ap-south-1 update-kubeconfig --name eks
    - name: List EKS Clusters
      run: aws eks list-clusters --region ap-south-1
    - name: get context
      run: kubectl config get-contexts
    - name: Check kubectl Version
      run: kubectl version --client
    - name: dry check
      run: kubectl get nodes
    - name: Set KUBECONFIG
      run: echo "::set-env name=KUBECONFIG::/path/to/your/kubeconfig.yaml"
    - name: Debug AWS Configuration
      run: |
        aws configure list

    # - name: create namespace
    #   run: kubectl create namespace my-namespace
    # - name: deploy to eks
    #   run: kubectl apply -f deployment.yml
    # # - name: run database migrations
    #   run: |
    #     kubectl exec -it deployment/my-django-app -n my-namespace -- python manage.py migrate
    #   env:
    #     DJANGO_SETTINGS_MODULE: "shoeshade.settings"
      
        
   
